cmake_minimum_required(VERSION 3.24)
project(rhs_hal C)
set(CMAKE_C_STANDARD 11)

add_library(${PROJECT_NAME} STATIC
        rhs_hal.c
)

target_include_directories(
        ${PROJECT_NAME} PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
)

macro(add_submodule_and_link_library submodule)
        add_subdirectory(${submodule})
        target_link_libraries(${PROJECT_NAME} PUBLIC ${submodule})
        string(TOUPPER "${submodule}" submodule_upper)
        target_compile_definitions(${PROJECT_NAME} PUBLIC -D${submodule_upper})
endmacro()

add_submodule_and_link_library(rhs_hal_interrupt)
add_submodule_and_link_library(rhs_hal_cortex)
add_submodule_and_link_library(rhs_hal_power)
add_submodule_and_link_library(rhs_hal_version)

if(RPLC_XL)
        message("\n\nRPLC_XL:")
        target_compile_definitions(${PROJECT_NAME} PUBLIC -DRPLC_XL)
        set(RHS_HAL_FLASH_EX ON)
        set(RHS_HAL_IO ON)
        set(RHS_HAL_RTC ON)
        set(RHS_HAL_SERIAL ON)
        set(RHS_HAL_SPEAKER ON)
        set(RHS_HAL_CAN ON)
        set(RHS_HAL_RANDOM ON)
        # add_submodule_and_link_library(rhs_hal_network)
elseif(RPLC_L)
        message("\n\nRPLC_L:")
        target_compile_definitions(${PROJECT_NAME} PUBLIC -DRPLC_L)
        set(RHS_HAL_FLASH_EX ON)
        set(RHS_HAL_IO ON)
        set(RHS_HAL_RTC ON)
        set(RHS_HAL_SERIAL ON)
        set(RHS_HAL_SPEAKER ON)
        set(RHS_HAL_CAN ON)
        set(RHS_HAL_RANDOM ON)
elseif(RPLC_M)
        message("\n\nRPLC_M:")
        target_compile_definitions(${PROJECT_NAME} PUBLIC -DRPLC_M)
        set(RHS_HAL_SERIAL ON)
        set(RHS_HAL_SPEAKER ON)
        set(RHS_HAL_CAN ON)
        set(RHS_HAL_USB ON)
endif()

message("\tHAL:")
if(RHS_HAL_SPEAKER)
        add_submodule_and_link_library(rhs_hal_speaker)
        message("\t\tRHS_HAL_SPEAKER\t\t- ON")
else()
        message("\t\tRHS_HAL_SPEAKER\t\t- OFF")
endif()
if(RHS_HAL_FLASH_EX)
        add_submodule_and_link_library(rhs_hal_flash_ex)
        message("\t\tRHS_HAL_FLASH_EX\t- ON")
else()
        message("\t\tRHS_HAL_FLASH_EX\t- OFF")
endif()
if(RHS_HAL_RTC)
        add_submodule_and_link_library(rhs_hal_rtc)
        message("\t\tRHS_HAL_RTC\t\t\t- ON")
else()
        message("\t\tRHS_HAL_RTC\t\t\t- OFF")
endif()
if(RHS_HAL_IO)
        add_submodule_and_link_library(rhs_hal_io)
        message("\t\tRHS_HAL_IO\t\t\t- ON")
else()
        message("\t\tRHS_HAL_IO\t\t\t- OFF")
endif()
if(RHS_HAL_SERIAL)
        add_submodule_and_link_library(rhs_hal_serial)
        message("\t\tRHS_HAL_SERIAL\t\t- ON")
else()
        message("\t\tRHS_HAL_SERIAL\t\t- OFF")
endif()
if(RHS_HAL_CAN)
        add_submodule_and_link_library(rhs_hal_can)
        message("\t\tRHS_HAL_CAN\t\t\t- ON")
else()
        message("\t\tRHS_HAL_CAN\t\t\t- OFF")
endif()
if(RHS_HAL_NETWORK)
        add_submodule_and_link_library(rhs_hal_network)
        message("\t\tRHS_HAL_NETWORK\t\t- ON")
else()
        message("\t\tRHS_HAL_NETWORK\t\t- OFF")
endif()
if(RHS_HAL_RANDOM)
        add_submodule_and_link_library(rhs_hal_random)
        message("\t\tRHS_HAL_RANDOM\t\t- ON")
else()
        message("\t\tRHS_HAL_RANDOM\t\t- OFF")
endif()
if(RHS_HAL_USB)
        add_submodule_and_link_library(rhs_hal_usb)
        message("\t\tRHS_HAL_USB\t\t\t- ON")
else()
        message("\t\tRHS_HAL_USB\t\t\t- OFF")
endif()
